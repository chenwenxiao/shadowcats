extend layout

block content
  .docs-wrapper.container
    link(rel='stylesheet', type='text/css', href='stylesheets/laravel.css')
    div.col-md-3
      section.sidebar
        ul
          li
            | 序言
            ul
              li
                a(href='releases') 版本说明
              li
                a(href='upgrade') 升级指南
              li
                a(href='contributions') 贡献指南
              li
                a(href='../../api/5.1') API 文档
          li
            | 安装设置
            ul
              li
                a(href='installation') 安装
              li
                a(href='homestead') Homestead
          li
            | 基础知识
            ul
              li
                a(href='routing') 路由
              li
                a(href='middleware') 中间件
              li
                a(href='controllers') 控制器
              li
                a(href='requests') 请求
              li
                a(href='responses') 响应
              li
                a(href='views') 视图
              li
                a(href='blade') Blade 模板
          li
            | 系统架构
            ul
              li
                a(href='lifecycle') 请求的生命周期
              li
                a(href='structure') 应用程序结构
              li
                a(href='providers') 服务提供者
              li
                a(href='container') 服务容器
              li
                a(href='contracts') Contract
              li
                a(href='facades') Facade
          li
            | 系统服务
            ul
              li
                a(href='authentication') 认证
              li
                a(href='authorization') 授权
              li
                a(href='artisan') Artisan 控制台
              li
                a(href='billing') 计费
              li
                a(href='cache') 缓存
              li
                a(href='collections') 集合
              li
                a(href='elixir') Elixir
              li
                a(href='encryption') 加密
              li
                a(href='errors') 错误与日志
              li
                a(href='events') 事件
              li
                a(href='filesystem') 文件系统 / 云存储
              li
                a(href='hashing') 哈希
              li
                a(href='helpers') 辅助方法
              li
                a(href='localization') 本地化
              li
                a(href='mail') 邮件
              li
                a(href='packages') 扩展包开发
              li
                a(href='pagination') 分页
              li
                a(href='queues') 队列
              li
                a(href='redis') Redis
              li
                a(href='session') 会话
              li
                a(href='envoy') SSH 任务
              li
                a(href='scheduling') 任务调度
              li
                a(href='testing') 测试
              li
                a(href='validation') 验证
          li
            | 数据库
            ul
              li
                a(href='database') 入门
              li
                a(href='queries') 查询构造器
              li
                a(href='migrations') 迁移
              li
                a(href='seeding') 数据填充
          li
            | Eloquent ORM
            ul
              li
                a(href='eloquent') 入门
              li
                a(href='eloquent-relationships') 关系
              li
                a(href='eloquent-collections') 集合
              li
                a(href='eloquent-mutators') 调整修改
              li
                a(href='eloquent-serialization') 序列化
    div.col-md-9
      article
        h1 安装
        ul
          li
            a(href='#installation') 安装
          li
            a(href='#configuration') 配置
            ul
              li
                a(href='#basic-configuration') 基本配置
              li
                a(href='#environment-configuration') 环境配置
              li
                a(href='#configuration-caching') 配置缓存
              li
                a(href='#accessing-configuration-values') 获取配置
              li
                a(href='#naming-your-application') 为应用程序命名
          li
            a(href='#maintenance-mode') 维护模式
        p
          a(name='installation')
        h2
          a(href='#installation') 安装
        h3 对运行环境的要求
        p
          | Laravel 框架对系统环境有一些要求。当然，所有这些要求在
          a(href='homestead') Laravel Homestead
          |  虚拟机中都是预装好的：
        .content-list(markdown='1')
          | - PHP >= 5.5.9 - OpenSSL PHP 扩展 - PDO PHP 扩展 - Mbstring PHP 扩展 - Tokenizer PHP 扩展
        p
          a(name='install-laravel')
        h3 安装 Laravel
        p
          | Laravel 利用
          a(href='http://getcomposer.org', target='_blank') Composer
          | （
          a(href='http://www.phpcomposer.com', target='_blank') Composer 中文
          | ）来管理其自身的依赖包。因此，在使用 Laravel 之前，请务必确保在你的机器上已经安装了 Composer 。如果你是下载“一键安装包”的话，可以暂时不用安装 Composer，等熟悉 Laravel 了再回头摸索，免得上来就遇到钉子。
        h4 下载 Laravel 一键安装包
        p
          | 安装 Composer 或通过 Composer 下载 Laravel 的依赖包时都可能被墙，为了方便大家学习和开发 Laravel 应用，Laravel 中文网已经提供了 Laravel 各个版本的一键安装包。这些一键安装包都已经集成了所有依赖（也就是已经执行过
          code.language-php composer install
          |  了，
          code.language-php vendor
          |  目录已经就绪）。
        p
          | 下载地址：
          a(href='http://www.golaravel.com/download/', target='_blank') http://www.golaravel.com/download/
        p 另外，一键安装包还包含了以下修改：
        ul
          li
            | Laravel 5.x 版本都已经包含了一份
            code.language-php
              span.token.punctuation .
              | env
            |  配置文件，大家可以不用自己创建这个文件了。
          li
            | 对于所有 Laravel 版本都已经设置了 Application key（也就是通过
            code.language-php
              | php artisan key
              span.token.punctuation :
              | generate
            |  生成了秘钥），注意：最终上线时，请务必重新执行一次
            code.language-php
              | php artisan key
              span.token.punctuation :
              | generate
            |  指令，以便重新生成秘钥。
          li 去除了所有视图文件中引用的 google 字体。
        blockquote
          p
            | Windows 用户还可以参考
            a(href='http://www.golaravel.com/post/install-and-run-laravel-5-x-on-windows/', target='_blank') 这篇文章
            |  按步骤安装并运行 Laravel 。
        h4 通过 Laravel 安装工具安装 Laravel
        p 首先，使用 Composer 下载 Laravel 安装包：
        pre.language-php.
        p
          | 请确保
          code.language-php
            span.token.constant PATH
          |  环境变量已经添加了
          code.language-php
            span.token.operator ~
            span.token.operator /
            span.token.punctuation .
            | composer
            span.token.operator /
            | vendor
            span.token.operator /
            | bin
          |  目录，这样，可执行文件
          code.language-php laravel
          |  就能被你的系统检测到了。
        p
          | 一旦安装完成后，就可以使用
          code.language-php
            | laravel
            span.token.keyword new
          |  命令在你指定的目录中建立一份全新安装的
          code.language-php Laravel
          |  应用。例如：
          code.language-php
            | laravel
            span.token.keyword new
            span.token.class-name blog
          |  命令会在当前目录下建立一个名为
          code.language-php blog
          |  的目录， 此目录里面存放着全新安装的 Laravel ，并且所有依赖包也已经安装好了。此方法的安装速度会比通过 Composer 安装快很多。
        pre.language-php.
        h4 通过 Composer Create-Project 命令安装 Laravel
        p
          | 还可以通过 Composer 的
          code.language-php
            | create
            span.token.operator -
            | project
          |  命令来安装 Laravel：
        pre.language-php.
        p
          a(name='configuration')
        h2
          a(href='#configuration') 配置
        p
          a(name='basic-configuration')
        h3 基本配置
        p
          | Laravel 框架所用的所有配置文件都被存放在
          code.language-php config
          |  目录下。每个配置项都有文档说明，所以请通读所有配置文件以熟悉所有可用的配置项。
        h4 目录权限
        p
          | 安装 Laravel 之后，可能需要你配置一下目录权限。web 服务器需要拥有
          code.language-php storage
          |  目录下的所有目录和
          code.language-php
            | bootstrap
            span.token.operator /
            | cache
          |  目录的写权限。如果你在使用
          a(href='homestead') Homestead
          |  虚拟机，这些权限都已经帮你设置好了。
        h4 应用程序的秘钥
        p
          | 安装 Laravel 之后接下来需要做的就是设置一个随机字串作为应用的秘钥（key）。如果你是通过 Composer 或 Laravel 安装器安装的 Laravel，这个 key 已经由
          code.language-php
            | key
            span.token.punctuation :
            | generate
          |  命令自动生成并设置了。一般情况下，这个作为 key 的字串的长度是 32 个字符。这个 key 还可以在
          code.language-php
            span.token.punctuation .
            | env
          |  环境配置文件中设置。如果你没有将
          code.language-php
            span.token.punctuation .
            | env
            span.token.punctuation .
            | example
          |  文件改名为
          code.language-php
            span.token.punctuation .
            | env
          | ，那现在就做吧。
          strong 如果应用的 key 没有被配置，会话和其他需要加密的数据将不安全！
        h4 额外的配置
        p
          | Laravel 开箱即用，几乎不需要什么配置。现在就可以开始你的开发之旅了！不过，建议你浏览一下
          code.language-php
            | config
            span.token.operator /
            | app
            span.token.punctuation .
            | php
          |  文件和此文件中的文档。它包含了几个配置项，例如
          code.language-php timezone
          |  和
          code.language-php locale
          |  ，可能需要根据你自身的情况稍作修改。
        p 你可能还需要为 Laravel 中的几个组件做些配置，例如：
        ul
          li
            a(href='cache#configuration') 缓存
          li
            a(href='database#configuration') 数据库
          li
            a(href='session#configuration') 会话
        p
          | 完成 Laravel 安装后，建议阅读
          a(href='installation#environment-configuration') 环境配置
          | 章节。
        h4 美化链接
        p
          strong Apache
        p
          | Laravel 框架自带了
          code.language-php
            span.token.keyword public
            span.token.operator /
            span.token.punctuation .
            | htaccess
          |  文件用来从网址中删除
          code.language-php
            | index
            span.token.punctuation .
            | php
          | 。如果你用的是 Apache 来运行你的 Laravel 应用，请务必启用 Apache 的
          code.language-php mod_rewrite
          |  模块。
        p
          | 如果 Laravel 自带的
          code.language-php
            span.token.punctuation .
            | htaccess
          |  文件在你的 Apache 中不起作用，请试一试下面的配置：
        pre.language-php.
        p
          strong Nginx
        p 在 Nginx 中，将下面的指令放到站点配置文件中就可以实现美化链接的功能：
        pre.language-php.
        p
          | 当然，如果你用的是
          a(href='homestead') Homestead
          | ，美化链接的功能已经被自动配置好了。
        p
          a(name='environment-configuration')
        h3 环境配置
        p 通常应用程序需要根据不同的运行环境加载不同的配置信息。例如，你可能希望本机开发环境与生产服务器环境使用不同的缓存驱动。通过配置文件，就可以轻松完成。
        p
          | 为了简化配置，Laravel 使用了 Vance Lucas 开发的
          a(href='https://github.com/vlucas/phpdotenv', target='_blank') DotEnv
          |  库。在全新安装的 Laravel 中，应用程序的根目录下都会有一个
          code.language-php
            span.token.punctuation .
            | env
            span.token.punctuation .
            | example
          |  文件，如果你是通过 Composer 安装的 Laravel，这个文件将被自动重命名为
          code.language-php
            span.token.punctuation .
            | env
          | 。如果没有，请手动重命名。
        p
          | 当应用程序收到一个请求时，
          code.language-php
            span.token.punctuation .
            | env
          |  文件中的所有变量都会被加载到 PHP 的
          code.language-php
            span.token.global $_ENV
          |  超全局变量中。这时，你就可以通过
          code.language-php env
          |  辅助函数来从该超全局变量中获取需要的配置了。实际上，如果你查看 Laravel 的配置文件，你会发现有几个配置项已经在使用这个辅助函数了。
        p
          | 根据你自己的本地开发环境和生产环境来修改这些环境配置即可。不过，
          code.language-php
            span.token.punctuation .
            | env
          |  文件不应该和应用程序的源码一起被提交到源码仓库中，因为每个开发环境/服务器环境可能需要不同的环境配置。
        p
          | 如果你们是一个开发团队，可能希望将
          code.language-php
            span.token.punctuation .
            | env
            span.token.punctuation .
            | example
          |  文件包含到源码中。通过在配置文件中预留一些占位符，团队中的其他开发人员将可以很清楚地看到执行此应用程序都需要配置哪些环境变量。
        h4 获取应用程序的运行环境
        p
          | 应用程序的运行环境可以通过
          code.language-php
            span.token.punctuation .
            | env
          |  文件中的
          code.language-php
            span.token.constant APP_ENV
          |  变量来确定。你还可以调用
          code.language-php App
          a(href='facades') facade
          |  中的
          code.language-php environment
          |  方法：
        pre.language-php.
        p
          | 通过给
          code.language-php environment
          |  方法传递参数可以检查当前环境是否与所传参数一致。如果需要，也可以传递多个值作为参数：
        pre.language-php.
        p
          | 通过
          code.language-php app
          |  辅助方法可以访问当前应用程序的实例：
        pre.language-php.
        p
          a(name='configuration-caching')
        h3 配置缓存
        p
          | 为了提升应用程序的执行速度，建议通过 Artisan 的
          code.language-php
            | config
            span.token.punctuation :
            | cache
          |  命令将所有配置文件合并到一个文件中并缓存起来。这将合并你应用中的所有配置信息到单个文件中，这样它就能被框架更快地载入。
        p
          | 建议将执行
          code.language-php
            | php artisan config
            span.token.punctuation :
            | cache
          |  命令作为产品部署流程中的一个步骤。由于开发过程中需要频繁修改配置项，因此不应该在本地开发时执行此命令。
        p
          a(name='accessing-configuration-values')
        h3 获取配置
        p
          | 通过
          code.language-php config
          |  全局辅助方法，你可以很容易地访问配置信息。配置信息可以通过 “点” 语法访问到，“点”用于分割配置文件的名称和配置项的名称。你还可以为不存在的配置项指定一个默认的返回值：
        pre.language-php.
        p
          | 如需在程序运行时重置配置信息，只需传递一个数组到
          code.language-php config
          |  辅助方法即可：
        pre.language-php.
        p
          a(name='naming-your-application')
        h3 为应用程序命名
        p
          | 安装 Laravel 后，你可能希望为自己的应用程序起个名字。默认情况下，
          code.language-php app
          |  目录所对应的命名空间为
          code.language-php App
          | ，并且 Composer 依据
          a(href='http://www.php-fig.org/psr/psr-4/', target='_blank') PSR-4 自动载入标准
          | 来加载此目录下的文件。不过，你可以将命名空间修改为应用程序的名字。执行 Artisan 的
          code.language-php
            | app
            span.token.punctuation :
            | name
          |  命令即可完成更改。
        p 例如，如果你的应用被命名为 "Horsefly"，你可以在应用程序的根目录下执行以下命令：
        pre.language-php.
        p
          | 重命名你的应用不是必须的。如果你愿意，你完全可以保留默认的
          code.language-php App
          |  作为命名空间。
        p
          a(name='maintenance-mode')
        h2
          a(href='#maintenance-mode') 维护模式
        p
          | 如果你的应用处于维护模式，当有请求传入时，将显示一个自定义的视图。当你对应用做更新或维护操作时，这能让你非常方便地"关闭"应用。默认的中间件栈中包含了用于检查是否处于维护模式的方法。如果当前应用处于维护模式，一个带有 503 状态码的
          code.language-php HttpException
          |  异常将被抛出。
        p
          | 要开启维护模式，只需简单地执行 Artisan 中的
          code.language-php down
          |  命令即可：
        pre.language-php.
        p
          | 要关闭维护模式，使用
          code.language-php up
          |  命令即可：
        pre.language-php.
        h3 在维护模式时响应请求的模板文件
        p
          | 用于在维护模式时响应请求的默认模板文件位于
          code.language-php
            | resources
            span.token.operator /
            | views
            span.token.operator /
            | errors
            span.token.operator /
            span.token.number 503
            span.token.punctuation .
            | blade
            span.token.punctuation .
            | php
          | 。
        h3 维护模式和队列
        p
          | 当你的应用处于维护模式时，
          a(href='queues') 队列任务
          |  将不会被处理。关闭维护模式后，这些任务将继续正常处理。
